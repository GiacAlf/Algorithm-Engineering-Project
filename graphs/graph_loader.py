"""
the following code is used to load a graph from a CSV file that can be
generated by the graph_generator.py script or prepared by the user
"""
import csv
import networkit as nk
import networkx as nx


class GraphLoader:
    def __init__(self, file_path):
        self.file_path = file_path

    def load_graph_from_csv(self, use_networkx=True):
        """Carica un grafo dal CSV. Di default, usa NetworkX."""
        if use_networkx:
            G = nx.Graph()  # Creo un grafo NetworkX
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    u, v = map(int, row)  # Converti i nodi in interi
                    G.add_edge(u, v)
            return G
        else:
            # Usa Networkit se non si vuole NetworkX
            G = nk.Graph()
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    u, v = map(int, row)
                    G.addEdge(u, v)
            return G

    """
    This function is used with Ford-Fulkerson that needs capacity to work.
    Now, for the edge connectivity purpose with unweighted graphs, is hard set to 1
    The graph can be loaded in a NetroKit or NetworkX way
    """
    def load_graph_from_csv_with_capacity(self, use_networkx=True):
        # Carica un grafo e assegna la capacità specificata in CSV a ciascun arco
        if use_networkx:
            G = nx.Graph()  # Crea un grafo NetworkX
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    u, v, capacity = map(int, row)  # Assicurati che ci siano tre colonne
                    G.add_edge(u, v, capacity=capacity)  # Aggiungi capacità specificata
            return G
        else:
            G = nk.Graph()  # Usa NetworKit senza capacità
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    u, v = map(int, row)
                    while G.numberOfNodes() <= max(u, v):
                        G.addNode()
                    G.addEdge(u, v)  # Nessuna capacità, NetworKit non la supporta direttamente
            return G

    """
    This function is used with Stoer-Wagner that needs weight to work.
    Now, for the edge connectivity purpose with unweighted graphs, is hard set to 1
    The graph can be loaded in a NetroKit or NetworkX way
    """
    def load_graph_from_csv_with_weight(self, use_networkx=True):
        """Carica un grafo e assegna un peso predefinito di 1 a ciascun arco."""
        if use_networkx:
            G = nx.Graph()  # Crea un grafo NetworkX
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    u, v, weight = map(int, row)
                    G.add_weighted_edges_from([(u, v, weight)])  # Aggiungi peso predefinito di 1
            return G
        else:
            G = nk.Graph()  # Usa NetworKit
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    u, v = map(int, row)
                    while G.numberOfNodes() <= max(u, v):
                        G.addNode()
                    G.addEdge(u, v)
            return G


    """
    def load_graph_from_csv(self):
        # initialize graph with a minimum number of nodes
        graph = nk.graph.Graph()  # empty graph
        with open(self.file_path, 'r') as file:
            reader = csv.reader(file)

            # adds nodes and edges to the graph
            for row in reader:
                u, v = int(row[0]), int(row[1])
                # adds nodes if they don't exist
                while graph.numberOfNodes() <= max(u, v):
                    graph.addNode()  # add a node
                graph.addEdge(u, v)  # add the edge
        return graph
    """


"""
verifica che il grafo sia stato caricato correttamente in entrambi i casi
"""
if __name__ == '__main__':
    # Percorso del file CSV
    file_path = 'generated_graphs/generated_graph.csv'
    loader = GraphLoader(file_path)

    # Caricamento con NetworkX
    print("Using NetworkX:")
    graph_nx = loader.load_graph_from_csv(True)
    print(f"Number of nodes: {graph_nx.number_of_nodes()}")
    print(f"Number of edges: {graph_nx.number_of_edges()}")

    # Caricamento con NetworKit
    print("\nUsing NetworKit:")
    graph_nk = loader.load_graph_from_csv()
    print(f"Number of nodes: {graph_nk.number_of_nodes()}")
    print(f"Number of edges: {graph_nk.number_of_edges()}")
